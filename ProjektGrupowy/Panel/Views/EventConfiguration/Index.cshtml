@model Panel.Models.EventConfigurationViewModel
@{
    ViewBag.Title = "Event Configuration";
}

<div class="container">
<div class="row">
    <h2>Event Configuration</h2>
</div>
<div class="row">
    <table id="" class="table table-hover">
        <thead>
            <tr>
                <th>Event rule</th>
                <th>Period</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @{ 
                foreach (var item in Model.Configurations)
                {
                    <tr>
                        <td>
                            @Html.Raw(item.Rule)
                        </td>
                        <td>
                            @Html.Encode(item.Period)
                        </td>
                        <td>
                            @Html.ActionLink("Edit", "Edit", new { id = item.Id })
                        </td>
                        <td>
                            @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
<div class="row">
    <p>Function(property [property_operator] property_value) [operator] value</p>
</div>
<div class="row">
    @using (Html.BeginForm("Add", "EventConfiguration", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
    {
        <div class="row">
            @Html.Raw(Model.Response)
            @Html.ValidationSummary("", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            <label for="function-input">Function:</label>
            @Html.DropDownListFor(x => x.CurrentConfig.Function, Model.CurrentConfig.FunctionList, new { @id = "function-input", @class = "form-control" })
        </div>
        <div class="form-group">
            <label for="property-input">Property:</label>
            @Html.DropDownListFor(x => x.CurrentConfig.PropertyId, Model.CurrentConfig.PropertyList, new { @id = "property-input", @class = "form-control" })
        </div>
        <div class="form-group">
            <label for="property-operator-input">Property operator:</label>
            @Html.DropDownListFor(x => x.CurrentConfig.PropertyOperator, Model.CurrentConfig.PropertyOperatorList, new { @id = "property-operator-input", @class = "form-control" })
        </div>
        <div class="form-group">
            <label for="property-value-input">Property value:</label>
            @Html.TextBoxFor(x => x.CurrentConfig.PropertyValue, new { @id = "property-value-input", @class = "form-control" })
        </div>
        <div class="form-group">
            <label for="operator-input">Operator:</label>
            @Html.DropDownListFor(x => x.CurrentConfig.Operator, Model.CurrentConfig.OperatorList, new { @id = "operator-input", @class = "form-control" })
        </div>
        <div class="form-group">
            <label for="value-input">Value:</label>
            @Html.TextBoxFor(x => x.CurrentConfig.ResultValue, new { @id = "value-input", @class = "form-control" })
        </div>
        <div class="form-group">
            <label for="period-input">Period (number of days):</label>
            @Html.TextBoxFor(x => x.CurrentConfig.Period, new { @id = "period-input", @class = "form-control" })
        </div>
        <div class="form-group">
            <label for="template-input">Template (html Code):</label>
            @Html.TextAreaFor(x => x.CurrentConfig.Template, new { @id = "template-input", @class = "form-control" })
        </div>
        @Html.HiddenFor(x => x.CurrentConfig.Id);
        <button type="submit" class="btn btn-default">Submit</button>
    }
</div>
</div>